.\" Process this file with
.\" groff -man -Tascii foo.1
.\"
.TH ARGoS 1 "March 2011" Linux "User Commands"
.SH NAME
argos \- a pluggable, fast, multi-engine and multi-robot simulator
.SH SYNOPSIS
.PP
.B argos [-h|--help]
.PP
.BI "argos [-c " FILE "|--config-file=" FILE "] [-n|--no-color]"
.PP
.BI "argos [-q " QUERY "|--query=" QUERY "] [-n|--no-color]"
.SH DESCRIPTION
.PP
ARGoS is a generic physics-based simulator designed to support large
swarms of different types of robots.
.PP
ARGoS provides several physics engines: 2D kinematics, 2D
dynamics, and 3D dynamics. ARGoS can run more than one physics engine
in the same experiment and the user can choose which robots to
simulate with which engine so that the simulation is optimised and
accurate.
.PP
ARGoS also offers a number of alternative visualisation possibilities,
such as a simple 3D OpenGL renderer, an offline POVRay renderer and a
tabular text renderer for data collection.
.PP
The modular architecture of ARGoS allows the user to easily add new
robots, actuators, sensors, physics engines and renderers. The simulator can
be configured with an intuitive XML file and new modules programmed by
the user are automatically registered and made available for use in
the XML file.
.PP
Finally, ARGoS is designed to make the transition between simulated
robots and real robots seamless. The control interface to write robot
controllers is common to both simulated and real robots. Thus, a
controller developed for a simulated robot needs only to be recompiled
before it can be run on the real robot platform.
.PP
The
.B argos
command requires you to set two environment variables to work (see
.BR ENVIRONMENT ).
For this reason, a handy wrapper script called
.B launch_argos
is also present. The wrapper script sets such variables internally for
you, and accepts the very same options of the
.B argos
command.
.SH OPTIONS
.TP
.BR -h ", " --help
display usage information.
.TP
\fB\-c \fI FILE\fR, \fB\-\-config-file=\fIFILE\fR
sets the experiment XML configuration file. See
.BR "EXPERIMENT CONFIGURATION" .
.TP
\fB\-q \fI QUERY\fR, \fB\-\-query=\fIQUERY\fR
query the available plugins. See
.BR QUERIES .
.TP
\fB\-n\fR, \fB\-\-no-color\fR
do not use colored output.
.SH EXPERIMENT CONFIGURATION
.PP
The configuration of an experiment in ARGoS is stored in an XML
file. For a comprehensive reference, see the User Manual. Its default
location is
.IR /usr/share/doc/argos2/manual/argos_user_manual.pdf .
.SH QUERIES
.PP
ARGoS has a pluggable architecture. To know which plug-ins are
available, use the
.B -q
.I QUERY
syntax.
.I QUERY
can have the following values:
.TP
.B all
print a list of all the available plugins.
.TP
.B actuators
print a list of all the available actuators.
.TP
.B sensors
print a list of all the available sensors.
.TP
.B physics_engines
print a list of all the available physics engines.
.TP
.B visualizations
print a list of all the available visualizations.
.TP
.B entities
print a list of all the available entities.
.PP
Alternatively,
.I QUERY
can be written as (part of) the name of a specific plugin as returned by the
above commands. In this case, you get a complete description of the matching
plugins. For example:
.PP
.B $ launch_argos -q epuck_proximity
.SH ENVIRONMENT
.TP
.B ARGOSINSTALLDIR
This environment variable must be set to where the ARGoS resources are
installed. By default, they are installed in
.IR /usr/share/argos2 "."
.TP
.B LD_LIBRARY_PATH
This environment variable contains a list of additional directories
where the operating system should look for dynamic libraries. The
default installation directory of the library is
.I /usr/lib/argos2
and to use ARGoS you must add it to
.BR LD_LIBRARY_PATH .
.PP
However, if you use the
.B launch_argos
wrapper script, you won't need to care about setting these
variables. In fact, the wrapper scripts does this job for you.
.SH AUTHOR
Carlo Pinciroli
.I <cpinciro@ulb.ac.be>
